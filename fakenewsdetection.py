# -*- coding: utf-8 -*-
"""FakeNewsDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n07i6KKMRypFQNOJIFgGkhaoLBbYcfe-
"""

from google.colab import files
file = files.upload()

from google.colab import files
file = files.upload()

import pandas as pd
df_train = pd.read_csv("labelled_train_set (1).csv")

df_test = pd.read_csv("unlabelled_test1.csv")

x_test = df_test["News/Comment"]
a = df_test["ID"]

temp = df_train["Type"]
li = []
for i in temp:
  if(i == "FALSE") :
    li.append(0)
  elif(i == "HALF TRUE"):
    li.append(1)
  elif(i == "MOSTLY FALSE"):
    li.append(2)
  elif(i == "PARTLY FALSE"):
    li.append(3)
  elif(i == "MOSTLY TRUE"):
    li.append(4)

df_train["Type"] = li

df_train["Type"][907]
df_train.drop(907, inplace = True)

x_train = df_train["News/Comment"]
y_train = df_train["Type"]

x_train_list = []
for i in x_train :
  x_train_list.append(str(i))
x_test_list = []
for i in x_test :
  x_test_list.append(str(i))

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer()
x_train = tfidf_vectorizer.fit_transform(x_train_list)
x_test = tfidf_vectorizer.transform(x_test_list)

print(y_train.value_counts())

from imblearn.over_sampling import SMOTE
smote = SMOTE()
x_train, y_train = smote.fit_resample(x_train, y_train)

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators = 700)
rfc.fit(x_train, y_train)

from sklearn.svm import SVC
svc = SVC(C = 0.1, kernel = "rbf", gamma = 0.01)
svc.fit(x_train, y_train)

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(max_iter = 1000, solver = "lbfgs")

from sklearn.ensemble import StackingClassifier
base_models = [("rfc", rfc), ("svc", svc)]
meta_learner = lr
stacking_classifier = StackingClassifier(estimators = base_models, final_estimator = meta_learner)
stacking_classifier.fit(x_train, y_train)

y_test_pred = stacking_classifier.predict(x_test)

import pandas as pd
import numpy as np
prediction = pd.DataFrame({"ID" : a, "Prediction" : y_test_pred})
prediction.to_csv('Prediction.csv', index = False)

from google.colab import files
files.download("Prediction.csv")